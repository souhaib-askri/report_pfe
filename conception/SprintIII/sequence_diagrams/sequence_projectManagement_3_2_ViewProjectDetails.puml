@startuml
title View Project - Sequence Diagram

actor User
boundary "Next.js Client" as Client
control "Next.js Server\n/api/projects/[slug]" as Server
database "PostgreSQL DB" as DB
boundary "MinIO Object Storage" as MinIO

' skinparam sequence {
'     ArrowColor #555
'     ActorBorderColor #555
'     LifeLineBorderColor #555
'     ParticipantBorderColor #007bff
'     DatabaseBorderColor #d9534f
'     ControlBorderColor #5cb85c
'     BoundaryBorderColor #f0ad4e
' }

== Pre-condition: User is authenticated ==

== 1. User Navigates to Project Page ==
activate Client
User -> Client: Clicks on a project link\n<font size=10>e.g., navigating to `/project/my-project`</font>

Client -> Server: **GET** /api/projects/my-project\n<font size=10>(Triggered by page load or client-side fetch)</font>
activate Server

== 2. Backend Gathers Project Data ==
Server -> DB: **SELECT** from `Project` & `Diagram` tables\n<font size=10>`prisma.project.findUnique({ where: {slug}, include: {diagrams: true} })`</font>
activate DB
DB --> Server: Returns project metadata and list of associated diagrams
deactivate DB

Server -> Server: For each diagram, generate a secure, temporary URL
loop for each diagram
    Server -> MinIO: **Generate Pre-signed URL** for diagram image object\n<font size=10>`minioClient.presignedGetObject(...)`</font>
    activate MinIO
    MinIO --> Server: Returns pre-signed URL
    deactivate MinIO
end

Server --> Client: **HTTP 200 OK**\n<font size=10>Body: { projectData, diagrams: [{..., imageUrl}, ...] }</font>
deactivate Server

== 3. Frontend Renders Page and Images ==
Client -> Client: Renders project info and diagram thumbnails\n<font size=10>using the `imageUrl` for each `<img>` src attribute</font>

Client -> MinIO: **GET** image_url_1
Client -> MinIO: **GET** image_url_2
' ...
activate MinIO
MinIO --> Client: Returns diagram image 1
MinIO --> Client: Returns diagram image 2
' ...
deactivate MinIO

Client --> User: Displays full project page with diagrams
deactivate Client

@enduml